@page "/Cadastro"
@using CapituloZero.WebApp.Client.Pages.Shared.Models
@using CapituloZero.WebApp.Client.Pages.Shared.Validator
@using System.Net.Http.Json

<MudContainer MaxWidth="MaxWidth.Medium" Class="d-flex justify-center" Style="min-height:80vh">
	<MudPaper Class="pa-8" Elevation="0" Style="width:100%;max-width:480px;align-self:center;background-color:#1E1E1E;border:1px solid #272727;">
		<MudStack Row="false" Spacing="2">
			<MudText Typo="Typo.h5" Align="Align.Center" Class="font-weight-bold" Style="letter-spacing:1px">Entre no Ninho</MudText>
			<MudForm @ref="form" Model="model" Validation="@(_validator.ValidateValue)">
				<MudTextField T="string" Label="Seu nome" For="@(() => model.Nome)" @bind-Value="model.Nome" Immediate="true" FullWidth="true" Dense="true" Placeholder="Para que possamos saber como te chamar :)" Style="background:#252525" />
				<MudTextField T="string" Label="Seu melhor e-mail" For="@(() => model.Email)" @bind-Value="model.Email" Immediate="true" FullWidth="true" Dense="true" Class="mt-4" Placeholder="Para você fazer o seu login" Style="background:#252525" />
				<MudTextField T="string" Label="Sua senha" For="@(() => model.Senha)" @bind-Value="model.Senha" Immediate="true" InputType="InputType.Password" FullWidth="true" Dense="true" Class="mt-4" Placeholder="Crie uma senha" Style="background:#252525" />
				<MudButton Style="background:#00C853;color:#ffffff;font-weight:600" Variant="Variant.Filled" FullWidth="true" Class="mt-6" Disabled="@_isSubmitting" OnClick="Submit">
					@if(_isSubmitting){<MudProgressCircular Indeterminate="true" Size="Size.Small" Class="me-2" Color="Color.Inherit" />} Cadastrar-se
				</MudButton>
				@if(!string.IsNullOrWhiteSpace(errorMessage))
				{
					<MudAlert Severity="Severity.Error" Dense="true" Class="mt-4">@errorMessage</MudAlert>
				}
				@if(successMessage is not null)
				{
					<MudAlert Severity="Severity.Success" Dense="true" Class="mt-4">@successMessage</MudAlert>
				}
			</MudForm>
			<MudDivider Class="my-6" />
			<div class="d-flex justify-center mt-2 mb-1">
				<img src="/favicon.ico" alt="Flyve" style="width:40px;height:40px;filter:drop-shadow(0 0 2px rgba(0,0,0,.6));" />
			</div>
		</MudStack>
	</MudPaper>
</MudContainer>

@code {
	[Inject] private HttpClient Http { get; set; } = default!;
	[Inject] private NavigationManager Nav { get; set; } = default!;
	MudForm form = default!;
	RegisterModel model = new();
	RegisterModelValidator _validator = new();
	bool _isSubmitting;
	string? errorMessage;
	string? successMessage;
	string? _antiForgeryToken;

	protected override async Task OnInitializedAsync()
	{
		Http.BaseAddress ??= new Uri(Nav.BaseUri);
		await EnsureAntiforgeryTokenAsync();
	}

	private async Task EnsureAntiforgeryTokenAsync()
	{
		if (!string.IsNullOrWhiteSpace(_antiForgeryToken)) return;
		try
		{
			var anti = await Http.GetFromJsonAsync<AntiforgeryResponse>("/antiforgery");
			_antiForgeryToken = anti?.token;
		}
		catch { }
	}

	private async Task Submit()
	{
		if (_isSubmitting) return;
		await form.Validate();
		if(!form.IsValid) return;
		errorMessage = null;
		successMessage = null;
		_isSubmitting = true;
		try
		{
			await EnsureAntiforgeryTokenAsync();
			var payload = new RegisterApiRequest(model.Nome, model.Email, model.Senha);
			var req = new HttpRequestMessage(HttpMethod.Post, "/Account/RegisterApi")
			{
				Content = JsonContent.Create(payload)
			};
			if(!string.IsNullOrWhiteSpace(_antiForgeryToken)) req.Headers.Add("RequestVerificationToken", _antiForgeryToken);
			var resp = await Http.SendAsync(req);
			if(!resp.IsSuccessStatusCode)
			{
				errorMessage = "Falha ao registrar.";
			}
			else
			{
				var result = await resp.Content.ReadFromJsonAsync<RegisterApiResponse>();
				if(result is null)
				{
					errorMessage = "Resposta inválida.";
				}
				else if(result.success)
				{
					successMessage = result.requiresConfirmation ? "Cadastro realizado! Verifique seu e-mail para confirmar a conta." : "Cadastro realizado! Redirecionando...";
					if(!result.requiresConfirmation)
					{
						await Task.Delay(1200);
						Nav.NavigateTo("/", true);
					}
				}
				else
				{
					errorMessage = result.errors is { Length: >0 } ? string.Join("; ", result.errors) : "Não foi possível concluir o cadastro.";
				}
			}
		}
		catch(Exception ex)
		{
			errorMessage = ex.Message;
		}
		finally
		{
			_isSubmitting = false;
		}
	}

	private record RegisterApiRequest(string Name, string Email, string Password);
	private record RegisterApiResponse(bool success, bool requiresConfirmation, string[]? errors);
	private record AntiforgeryResponse(string token);
}