@using System.Security.Claims
@using CapituloZero.WebApp.Client.Abstract
@using Microsoft.AspNetCore.Authorization

@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject AuthenticationStateProvider AuthenticationStateProvider

@attribute [Authorize]

<AuthorizeView>
    <Authorized>
        <MudMenu Direction="Direction.Left" OffsetX="true" Dense="true">
            <ActivatorContent>
                <MudIcon Icon="@Icons.Custom.Uncategorized.ChessPawn" Size="Size.Large" />
            </ActivatorContent>
            <ChildContent>
                <MudCard Elevation="0">
                    <MudCardHeader>
                        <CardHeaderAvatar>
                            <MudAvatar Color="Color.Primary" Variant="Variant.Outlined" Size="Size.Large">
                                <MudIcon Icon="@Icons.Custom.Uncategorized.ChessPawn" Size="Size.Large"/>
                            </MudAvatar>
                        </CardHeaderAvatar>
                    </MudCardHeader>
                </MudCard>
                <MudListItem T="string" Text="Seu Perfil" Icon="@Icons.Material.Outlined.Person" Href="Account/Manage"/>
                @foreach (var menu in GetRolesMenus(context.User.Claims.Where(c => c.Type == ClaimTypes.Role).Select(c => c.Value).ToArray()))
                {
                    <MudListItem T="string" Text="@($"App {menu}")" Icon="@Icons.Material.Outlined.Apps"
                                 Href="@($"/{menu}/")"/>
                }
                <MudDivider/>
                <MudListItem T="string" Text="Logout" Icon="@Icons.Material.Outlined.Logout" @onclick="LogOutAction"/>
            </ChildContent>
        </MudMenu>
    </Authorized>
    <NotAuthorized>
            <MudIconButton Icon="@Icons.Material.Filled.Person" Size="Size.Large" Href="Login"/>
    </NotAuthorized>
</AuthorizeView>

@code {

    [Inject]
    private IAntiforgeryTokenProvider _antiforgeryTokenProvider { get; set; } = default!;
    
    private async Task LogOutAction()
    {
        var antiforgeryToken = await _antiforgeryTokenProvider.GetTokenAsync();

        using var content = new FormUrlEncodedContent(new[]
        {
            new KeyValuePair<string, string>("ReturnUrl", NavigationManager.ToBaseRelativePath(NavigationManager.Uri)),
            new KeyValuePair<string, string>("__RequestVerificationToken", antiforgeryToken)
        });

        await Http.PostAsync("/Account/Logout", content);

        NavigationManager.Refresh(true);
    }

    private string[] GetRolesMenus(string[] roles)
    {
        var menus = new List<string>();
        if (roles.Contains("Admin"))
        {
            menus.Add("Admin");
            menus.Add("Autor");
            menus.Add("Parceiro");
            return menus.ToArray();
        }

        foreach (var role in roles)
        {
            if (role == "Cliente")
                continue;

            menus.Add(role);
        }

        return menus.ToArray();
    }

}
